'use strict';

var Immutable = require('immutable');
var checkIsString = require('../../util/string/check');
var checkIsObject = require('../../util/object/check');
var checkIsNotNull = require('../../util/object/checkIsNotNull');
var SEPARATOR = '.';

/**
* Pointer to the domain contaier.
* @type {Object}
*/
var domainContainer = require('../domain/container');
var entityContainer = require('./container');
var computedEntityContainer = Immutable.Map({});

/*
binder
idAttribute
decoratorOptions
symbol
style
decorator
isValidationOff
label
required
domain
*/

/**
 * Build all entity information from entity name.
 * @param  {string} entityName - The entity name.
 */
function _buildEntityInformation(entityName) {
    var entityDomainInfos = entityContainer.getEntityConfiguration(entityName);
    checkIsNotNull('entityDomainInfos', entityDomainInfos);
    var container = {};
    //Populate the domain values i
    for (var key in entityDomainInfos) {
        container[key] = _buildFieldInformation('' + entityName + SEPARATOR + key);
    }
    //Update the computed information map.
    computedEntityContainer = computedEntityContainer.set(entityName, Immutable.Map(container));
}

/**
 * Build the field informations.
 * @param  {string} fieldPath - The field path.
 * @return {Immutable.Map} - The immutable field description.
 */
function _buildFieldInformation(fieldPath) {
    var fieldConf = entityContainer.getFieldConfiguration(fieldPath);
    var immutableFieldConf = Immutable.Map(fieldConf);
    //Maybe add a domain check existance
    var domain = fieldConf.domain;

    return domainContainer.get(domain).mergeDeep(immutableFieldConf);
}

/**
* Get the entity information from the entity name and given the extended informations.
* @param {string} entityName - The name of the entity.
* @param {object} complementaryInformation - Additional information on the entity.
* @return {object} - The entity informations from the entity  name.
*/
function getEntityInformations(entityName, complementaryInformation) {
    checkIsString('entityName', entityName);
    checkIsObject('complementaryInformation', complementaryInformation);
    var key = entityName.split(SEPARATOR);
    if (!computedEntityContainer.hasIn(key)) {
        _buildEntityInformation(entityName);
    }
    return computedEntityContainer.get(entityName).mergeDeep(complementaryInformation).toJS();
}

/**
* Get the field informations.
* @param {string} fieldName - name or path of the field.
* @param {object} complementaryInformation - Additional informations to extend the domain informations.
* @return {object} - The builded field informations.
*/
function getFieldInformations(fieldName, complementaryInformation) {
    checkIsString('fieldName', fieldName);
    checkIsObject('complementaryInformation', complementaryInformation);
    var fieldPath = fieldName.split(SEPARATOR);
    if (computedEntityContainer.hasIn(fieldPath)) {
        return computedEntityContainer.getIn(fieldPath).toJS();
    }
    return _buildFieldInformation(fieldPath).mergeDeep(complementaryInformation).toJS();
}

module.exports = {
    getEntityInformations: getEntityInformations,
    getFieldInformations: getFieldInformations
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2Nlc3Nvci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQU0sWUFBWSxRQUFRLFdBQVIsQ0FBbEI7QUFDQSxJQUFNLGdCQUFnQixRQUFRLHlCQUFSLENBQXRCO0FBQ0EsSUFBTSxnQkFBZ0IsUUFBUSx5QkFBUixDQUF0QjtBQUNBLElBQU0saUJBQWlCLFFBQVEsa0NBQVIsQ0FBdkI7QUFDQSxJQUFNLFlBQVksR0FBbEI7O0FBRUE7Ozs7QUFJQSxJQUFNLGtCQUFrQixRQUFRLHFCQUFSLENBQXhCO0FBQ0EsSUFBTSxrQkFBa0IsUUFBUSxhQUFSLENBQXhCO0FBQ0EsSUFBSSwwQkFBMEIsVUFBVSxHQUFWLENBQWMsRUFBZCxDQUE5Qjs7QUFFQTs7Ozs7Ozs7Ozs7OztBQWFBOzs7O0FBSUEsU0FBUyx1QkFBVCxDQUFpQyxVQUFqQyxFQUE2QztBQUN6QyxRQUFNLG9CQUFvQixnQkFBZ0Isc0JBQWhCLENBQXVDLFVBQXZDLENBQTFCO0FBQ0EsbUJBQWUsbUJBQWYsRUFBb0MsaUJBQXBDO0FBQ0EsUUFBSSxZQUFZLEVBQWhCO0FBQ0E7QUFDQSxTQUFLLElBQUksR0FBVCxJQUFnQixpQkFBaEIsRUFBbUM7QUFDL0Isa0JBQVUsR0FBVixJQUFpQiw0QkFBMEIsVUFBMUIsR0FBdUMsU0FBdkMsR0FBbUQsR0FBbkQsQ0FBakI7QUFDSDtBQUNEO0FBQ0EsOEJBQTBCLHdCQUF3QixHQUF4QixDQUE0QixVQUE1QixFQUF3QyxVQUFVLEdBQVYsQ0FBYyxTQUFkLENBQXhDLENBQTFCO0FBQ0g7O0FBRUQ7Ozs7O0FBS0EsU0FBUyxzQkFBVCxDQUFnQyxTQUFoQyxFQUEyQztBQUN2QyxRQUFNLFlBQVksZ0JBQWdCLHFCQUFoQixDQUFzQyxTQUF0QyxDQUFsQjtBQUNBLFFBQU0scUJBQXFCLFVBQVUsR0FBVixDQUFjLFNBQWQsQ0FBM0I7QUFDQTtBQUh1QyxRQUlsQyxNQUprQyxHQUl4QixTQUp3QixDQUlsQyxNQUprQzs7QUFLdkMsV0FBTyxnQkFBZ0IsR0FBaEIsQ0FBb0IsTUFBcEIsRUFBNEIsU0FBNUIsQ0FBc0Msa0JBQXRDLENBQVA7QUFDSDs7QUFFRDs7Ozs7O0FBTUEsU0FBUyxxQkFBVCxDQUErQixVQUEvQixFQUEyQyx3QkFBM0MsRUFBcUU7QUFDakUsa0JBQWMsWUFBZCxFQUE0QixVQUE1QjtBQUNBLGtCQUFjLDBCQUFkLEVBQTBDLHdCQUExQztBQUNBLFFBQU0sTUFBTSxXQUFXLEtBQVgsQ0FBaUIsU0FBakIsQ0FBWjtBQUNBLFFBQUksQ0FBQyx3QkFBd0IsS0FBeEIsQ0FBOEIsR0FBOUIsQ0FBTCxFQUF5QztBQUNyQyxnQ0FBd0IsVUFBeEI7QUFDSDtBQUNELFdBQU8sd0JBQXdCLEdBQXhCLENBQTRCLFVBQTVCLEVBQXdDLFNBQXhDLENBQWtELHdCQUFsRCxFQUE0RSxJQUE1RSxFQUFQO0FBQ0g7O0FBRUQ7Ozs7OztBQU1BLFNBQVMsb0JBQVQsQ0FBOEIsU0FBOUIsRUFBeUMsd0JBQXpDLEVBQW1FO0FBQy9ELGtCQUFjLFdBQWQsRUFBMkIsU0FBM0I7QUFDQSxrQkFBYywwQkFBZCxFQUEwQyx3QkFBMUM7QUFDQSxRQUFNLFlBQVksVUFBVSxLQUFWLENBQWdCLFNBQWhCLENBQWxCO0FBQ0EsUUFBSSx3QkFBd0IsS0FBeEIsQ0FBOEIsU0FBOUIsQ0FBSixFQUE4QztBQUMxQyxlQUFPLHdCQUF3QixLQUF4QixDQUE4QixTQUE5QixFQUF5QyxJQUF6QyxFQUFQO0FBQ0g7QUFDRCxXQUFPLHVCQUF1QixTQUF2QixFQUFrQyxTQUFsQyxDQUE0Qyx3QkFBNUMsRUFBc0UsSUFBdEUsRUFBUDtBQUNIOztBQUdELE9BQU8sT0FBUCxHQUFpQjtBQUNiLDJCQUF1QixxQkFEVjtBQUViLDBCQUFzQjtBQUZULENBQWpCIiwiZmlsZSI6InByb2Nlc3Nvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xyXG5jb25zdCBjaGVja0lzU3RyaW5nID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9zdHJpbmcvY2hlY2snKTtcclxuY29uc3QgY2hlY2tJc09iamVjdCA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvb2JqZWN0L2NoZWNrJyk7XHJcbmNvbnN0IGNoZWNrSXNOb3ROdWxsID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9vYmplY3QvY2hlY2tJc05vdE51bGwnKTtcclxuY29uc3QgU0VQQVJBVE9SID0gJy4nO1xyXG5cclxuLyoqXHJcbiogUG9pbnRlciB0byB0aGUgZG9tYWluIGNvbnRhaWVyLlxyXG4qIEB0eXBlIHtPYmplY3R9XHJcbiovXHJcbmNvbnN0IGRvbWFpbkNvbnRhaW5lciA9IHJlcXVpcmUoJy4uL2RvbWFpbi9jb250YWluZXInKTtcclxuY29uc3QgZW50aXR5Q29udGFpbmVyID0gcmVxdWlyZSgnLi9jb250YWluZXInKTtcclxubGV0IGNvbXB1dGVkRW50aXR5Q29udGFpbmVyID0gSW1tdXRhYmxlLk1hcCh7fSk7XHJcblxyXG4vKlxyXG5iaW5kZXJcclxuaWRBdHRyaWJ1dGVcclxuZGVjb3JhdG9yT3B0aW9uc1xyXG5zeW1ib2xcclxuc3R5bGVcclxuZGVjb3JhdG9yXHJcbmlzVmFsaWRhdGlvbk9mZlxyXG5sYWJlbFxyXG5yZXF1aXJlZFxyXG5kb21haW5cclxuKi9cclxuXHJcbi8qKlxyXG4gKiBCdWlsZCBhbGwgZW50aXR5IGluZm9ybWF0aW9uIGZyb20gZW50aXR5IG5hbWUuXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gZW50aXR5TmFtZSAtIFRoZSBlbnRpdHkgbmFtZS5cclxuICovXHJcbmZ1bmN0aW9uIF9idWlsZEVudGl0eUluZm9ybWF0aW9uKGVudGl0eU5hbWUpIHtcclxuICAgIGNvbnN0IGVudGl0eURvbWFpbkluZm9zID0gZW50aXR5Q29udGFpbmVyLmdldEVudGl0eUNvbmZpZ3VyYXRpb24oZW50aXR5TmFtZSk7XHJcbiAgICBjaGVja0lzTm90TnVsbCgnZW50aXR5RG9tYWluSW5mb3MnLCBlbnRpdHlEb21haW5JbmZvcyk7XHJcbiAgICBsZXQgY29udGFpbmVyID0ge307XHJcbiAgICAvL1BvcHVsYXRlIHRoZSBkb21haW4gdmFsdWVzIGlcclxuICAgIGZvciAobGV0IGtleSBpbiBlbnRpdHlEb21haW5JbmZvcykge1xyXG4gICAgICAgIGNvbnRhaW5lcltrZXldID0gX2J1aWxkRmllbGRJbmZvcm1hdGlvbihgJHtlbnRpdHlOYW1lfSR7U0VQQVJBVE9SfSR7a2V5fWApO1xyXG4gICAgfVxyXG4gICAgLy9VcGRhdGUgdGhlIGNvbXB1dGVkIGluZm9ybWF0aW9uIG1hcC5cclxuICAgIGNvbXB1dGVkRW50aXR5Q29udGFpbmVyID0gY29tcHV0ZWRFbnRpdHlDb250YWluZXIuc2V0KGVudGl0eU5hbWUsIEltbXV0YWJsZS5NYXAoY29udGFpbmVyKSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBCdWlsZCB0aGUgZmllbGQgaW5mb3JtYXRpb25zLlxyXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGZpZWxkUGF0aCAtIFRoZSBmaWVsZCBwYXRoLlxyXG4gKiBAcmV0dXJuIHtJbW11dGFibGUuTWFwfSAtIFRoZSBpbW11dGFibGUgZmllbGQgZGVzY3JpcHRpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiBfYnVpbGRGaWVsZEluZm9ybWF0aW9uKGZpZWxkUGF0aCkge1xyXG4gICAgY29uc3QgZmllbGRDb25mID0gZW50aXR5Q29udGFpbmVyLmdldEZpZWxkQ29uZmlndXJhdGlvbihmaWVsZFBhdGgpO1xyXG4gICAgY29uc3QgaW1tdXRhYmxlRmllbGRDb25mID0gSW1tdXRhYmxlLk1hcChmaWVsZENvbmYpO1xyXG4gICAgLy9NYXliZSBhZGQgYSBkb21haW4gY2hlY2sgZXhpc3RhbmNlXHJcbiAgICBsZXQge2RvbWFpbn0gPSBmaWVsZENvbmY7XHJcbiAgICByZXR1cm4gZG9tYWluQ29udGFpbmVyLmdldChkb21haW4pLm1lcmdlRGVlcChpbW11dGFibGVGaWVsZENvbmYpO1xyXG59XHJcblxyXG4vKipcclxuKiBHZXQgdGhlIGVudGl0eSBpbmZvcm1hdGlvbiBmcm9tIHRoZSBlbnRpdHkgbmFtZSBhbmQgZ2l2ZW4gdGhlIGV4dGVuZGVkIGluZm9ybWF0aW9ucy5cclxuKiBAcGFyYW0ge3N0cmluZ30gZW50aXR5TmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBlbnRpdHkuXHJcbiogQHBhcmFtIHtvYmplY3R9IGNvbXBsZW1lbnRhcnlJbmZvcm1hdGlvbiAtIEFkZGl0aW9uYWwgaW5mb3JtYXRpb24gb24gdGhlIGVudGl0eS5cclxuKiBAcmV0dXJuIHtvYmplY3R9IC0gVGhlIGVudGl0eSBpbmZvcm1hdGlvbnMgZnJvbSB0aGUgZW50aXR5ICBuYW1lLlxyXG4qL1xyXG5mdW5jdGlvbiBnZXRFbnRpdHlJbmZvcm1hdGlvbnMoZW50aXR5TmFtZSwgY29tcGxlbWVudGFyeUluZm9ybWF0aW9uKSB7XHJcbiAgICBjaGVja0lzU3RyaW5nKCdlbnRpdHlOYW1lJywgZW50aXR5TmFtZSk7XHJcbiAgICBjaGVja0lzT2JqZWN0KCdjb21wbGVtZW50YXJ5SW5mb3JtYXRpb24nLCBjb21wbGVtZW50YXJ5SW5mb3JtYXRpb24pO1xyXG4gICAgY29uc3Qga2V5ID0gZW50aXR5TmFtZS5zcGxpdChTRVBBUkFUT1IpO1xyXG4gICAgaWYgKCFjb21wdXRlZEVudGl0eUNvbnRhaW5lci5oYXNJbihrZXkpKSB7XHJcbiAgICAgICAgX2J1aWxkRW50aXR5SW5mb3JtYXRpb24oZW50aXR5TmFtZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29tcHV0ZWRFbnRpdHlDb250YWluZXIuZ2V0KGVudGl0eU5hbWUpLm1lcmdlRGVlcChjb21wbGVtZW50YXJ5SW5mb3JtYXRpb24pLnRvSlMoKTtcclxufVxyXG5cclxuLyoqXHJcbiogR2V0IHRoZSBmaWVsZCBpbmZvcm1hdGlvbnMuXHJcbiogQHBhcmFtIHtzdHJpbmd9IGZpZWxkTmFtZSAtIG5hbWUgb3IgcGF0aCBvZiB0aGUgZmllbGQuXHJcbiogQHBhcmFtIHtvYmplY3R9IGNvbXBsZW1lbnRhcnlJbmZvcm1hdGlvbiAtIEFkZGl0aW9uYWwgaW5mb3JtYXRpb25zIHRvIGV4dGVuZCB0aGUgZG9tYWluIGluZm9ybWF0aW9ucy5cclxuKiBAcmV0dXJuIHtvYmplY3R9IC0gVGhlIGJ1aWxkZWQgZmllbGQgaW5mb3JtYXRpb25zLlxyXG4qL1xyXG5mdW5jdGlvbiBnZXRGaWVsZEluZm9ybWF0aW9ucyhmaWVsZE5hbWUsIGNvbXBsZW1lbnRhcnlJbmZvcm1hdGlvbikge1xyXG4gICAgY2hlY2tJc1N0cmluZygnZmllbGROYW1lJywgZmllbGROYW1lKTtcclxuICAgIGNoZWNrSXNPYmplY3QoJ2NvbXBsZW1lbnRhcnlJbmZvcm1hdGlvbicsIGNvbXBsZW1lbnRhcnlJbmZvcm1hdGlvbik7XHJcbiAgICBjb25zdCBmaWVsZFBhdGggPSBmaWVsZE5hbWUuc3BsaXQoU0VQQVJBVE9SKTtcclxuICAgIGlmIChjb21wdXRlZEVudGl0eUNvbnRhaW5lci5oYXNJbihmaWVsZFBhdGgpKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbXB1dGVkRW50aXR5Q29udGFpbmVyLmdldEluKGZpZWxkUGF0aCkudG9KUygpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9idWlsZEZpZWxkSW5mb3JtYXRpb24oZmllbGRQYXRoKS5tZXJnZURlZXAoY29tcGxlbWVudGFyeUluZm9ybWF0aW9uKS50b0pTKCk7XHJcbn1cclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGdldEVudGl0eUluZm9ybWF0aW9uczogZ2V0RW50aXR5SW5mb3JtYXRpb25zLFxyXG4gICAgZ2V0RmllbGRJbmZvcm1hdGlvbnM6IGdldEZpZWxkSW5mb3JtYXRpb25zXHJcbn07XHJcbiJdfQ==