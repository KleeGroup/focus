'use strict';

/*global document*/
//dependencies
var React = require('react');
var ReactDOM = require('react-dom');
var keys = require('lodash/object/keys');
var mountedComponents = require('./mounted-components');
var clearComponent = require('./clear');

/**
*  Render a react component in a DOM selector.
* @param {object} component - A react component.
* @param {string} selector  - A selector on a DOM node.
* @param {object} options   - Options for the component rendering.
*/
module.exports = function renderComponent(component, selector, options) {
    options = options || {};
    // Clear a potential previously mounted component
    clearComponent(selector);
    var targetDOMContainer = document.querySelector(selector);
    if (!targetDOMContainer) {
        throw new Error('You are trying to render a component in a DOM element which is not existing, your selector is  ' + selector);
    }
    // Render the component
    var mountedComponent = ReactDOM.render(React.createElement(component, options.props, options.data), targetDOMContainer);
    //Save the fact that a component is mounted.
    mountedComponents[selector] = mountedComponent;
    console.info('Mounted components : ', keys(mountedComponents));
    return mountedComponent;
};
/*
Exemple
var render = Focus.application.render;
var MyComponent = require('./my-component');
render(MyComponent, 'div.component-container', {props: {id: '12'}});
*/
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2Nlc3Nvci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQSxJQUFNLFFBQVEsUUFBUSxPQUFSLENBQWQ7QUFDQSxJQUFNLFdBQVcsUUFBUSxXQUFSLENBQWpCO0FBQ0EsSUFBTSxPQUFPLFFBQVEsb0JBQVIsQ0FBYjtBQUNBLElBQU0sb0JBQW9CLFFBQVEsc0JBQVIsQ0FBMUI7QUFDQSxJQUFNLGlCQUFpQixRQUFRLFNBQVIsQ0FBdkI7O0FBRUE7Ozs7OztBQU1BLE9BQU8sT0FBUCxHQUFpQixTQUFTLGVBQVQsQ0FBeUIsU0FBekIsRUFBb0MsUUFBcEMsRUFBOEMsT0FBOUMsRUFBc0Q7QUFDbkUsY0FBVSxXQUFXLEVBQXJCO0FBQ0E7QUFDQSxtQkFBZSxRQUFmO0FBQ0EsUUFBTSxxQkFBcUIsU0FBUyxhQUFULENBQXVCLFFBQXZCLENBQTNCO0FBQ0EsUUFBRyxDQUFDLGtCQUFKLEVBQXVCO0FBQ25CLGNBQU0sSUFBSSxLQUFKLHFHQUE0RyxRQUE1RyxDQUFOO0FBQ0g7QUFDRDtBQUNBLFFBQU0sbUJBQW1CLFNBQVMsTUFBVCxDQUNyQixNQUFNLGFBQU4sQ0FBb0IsU0FBcEIsRUFBK0IsUUFBUSxLQUF2QyxFQUE4QyxRQUFRLElBQXRELENBRHFCLEVBRXJCLGtCQUZxQixDQUF6QjtBQUlBO0FBQ0Esc0JBQWtCLFFBQWxCLElBQThCLGdCQUE5QjtBQUNBLFlBQVEsSUFBUixDQUFhLHVCQUFiLEVBQXNDLEtBQUssaUJBQUwsQ0FBdEM7QUFDQSxXQUFPLGdCQUFQO0FBQ0gsQ0FqQkQ7QUFrQkEiLCJmaWxlIjoicHJvY2Vzc29yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypnbG9iYWwgZG9jdW1lbnQqL1xyXG4vL2RlcGVuZGVuY2llc1xyXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmNvbnN0IFJlYWN0RE9NID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XHJcbmNvbnN0IGtleXMgPSByZXF1aXJlKCdsb2Rhc2gvb2JqZWN0L2tleXMnKTtcclxuY29uc3QgbW91bnRlZENvbXBvbmVudHMgPSByZXF1aXJlKCcuL21vdW50ZWQtY29tcG9uZW50cycpO1xyXG5jb25zdCBjbGVhckNvbXBvbmVudCA9IHJlcXVpcmUoJy4vY2xlYXInKTtcclxuXHJcbi8qKlxyXG4qICBSZW5kZXIgYSByZWFjdCBjb21wb25lbnQgaW4gYSBET00gc2VsZWN0b3IuXHJcbiogQHBhcmFtIHtvYmplY3R9IGNvbXBvbmVudCAtIEEgcmVhY3QgY29tcG9uZW50LlxyXG4qIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciAgLSBBIHNlbGVjdG9yIG9uIGEgRE9NIG5vZGUuXHJcbiogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgICAtIE9wdGlvbnMgZm9yIHRoZSBjb21wb25lbnQgcmVuZGVyaW5nLlxyXG4qL1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlbmRlckNvbXBvbmVudChjb21wb25lbnQsIHNlbGVjdG9yLCBvcHRpb25zKXtcclxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG4gICAgLy8gQ2xlYXIgYSBwb3RlbnRpYWwgcHJldmlvdXNseSBtb3VudGVkIGNvbXBvbmVudFxyXG4gICAgY2xlYXJDb21wb25lbnQoc2VsZWN0b3IpO1xyXG4gICAgY29uc3QgdGFyZ2V0RE9NQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XHJcbiAgICBpZighdGFyZ2V0RE9NQ29udGFpbmVyKXtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFlvdSBhcmUgdHJ5aW5nIHRvIHJlbmRlciBhIGNvbXBvbmVudCBpbiBhIERPTSBlbGVtZW50IHdoaWNoIGlzIG5vdCBleGlzdGluZywgeW91ciBzZWxlY3RvciBpcyAgJHtzZWxlY3Rvcn1gKTtcclxuICAgIH1cclxuICAgIC8vIFJlbmRlciB0aGUgY29tcG9uZW50XHJcbiAgICBjb25zdCBtb3VudGVkQ29tcG9uZW50ID0gUmVhY3RET00ucmVuZGVyKFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBvcHRpb25zLnByb3BzLCBvcHRpb25zLmRhdGEpLFxyXG4gICAgICAgIHRhcmdldERPTUNvbnRhaW5lclxyXG4gICAgKTtcclxuICAgIC8vU2F2ZSB0aGUgZmFjdCB0aGF0IGEgY29tcG9uZW50IGlzIG1vdW50ZWQuXHJcbiAgICBtb3VudGVkQ29tcG9uZW50c1tzZWxlY3Rvcl0gPSBtb3VudGVkQ29tcG9uZW50O1xyXG4gICAgY29uc29sZS5pbmZvKCdNb3VudGVkIGNvbXBvbmVudHMgOiAnLCBrZXlzKG1vdW50ZWRDb21wb25lbnRzKSk7XHJcbiAgICByZXR1cm4gbW91bnRlZENvbXBvbmVudDtcclxufTtcclxuLypcclxuRXhlbXBsZVxyXG52YXIgcmVuZGVyID0gRm9jdXMuYXBwbGljYXRpb24ucmVuZGVyO1xyXG52YXIgTXlDb21wb25lbnQgPSByZXF1aXJlKCcuL215LWNvbXBvbmVudCcpO1xyXG5yZW5kZXIoTXlDb21wb25lbnQsICdkaXYuY29tcG9uZW50LWNvbnRhaW5lcicsIHtwcm9wczoge2lkOiAnMTInfX0pO1xyXG4qL1xyXG4iXX0=